#!/usr/bin/env php

<?php

use Doctrine\DBAL\DriverManager;
use Doctrine\DBAL\Tools\Console\Command\ReservedWordsCommand;
use Doctrine\DBAL\Tools\Console\Command\RunSqlCommand;
use Doctrine\Migrations\Configuration\Configuration;
use Doctrine\Migrations\Configuration\Connection\ExistingConnection;
use Doctrine\Migrations\Configuration\EntityManager\ExistingEntityManager;
use Doctrine\Migrations\Configuration\Migration\ExistingConfiguration;
use Doctrine\Migrations\DependencyFactory;
use Doctrine\Migrations\Exception\MigrationException;
use Doctrine\Migrations\Metadata\Storage\TableMetadataStorageConfiguration;
use Doctrine\Migrations\Tools\Console\Command\CurrentCommand;
use Doctrine\Migrations\Tools\Console\Command\DiffCommand;
use Doctrine\Migrations\Tools\Console\Command\DumpSchemaCommand;
use Doctrine\Migrations\Tools\Console\Command\ExecuteCommand;
use Doctrine\Migrations\Tools\Console\Command\GenerateCommand;
use Doctrine\Migrations\Tools\Console\Command\LatestCommand;
use Doctrine\Migrations\Tools\Console\Command\ListCommand;
use Doctrine\Migrations\Tools\Console\Command\MigrateCommand;
use Doctrine\Migrations\Tools\Console\Command\RollupCommand;
use Doctrine\Migrations\Tools\Console\Command\StatusCommand;
use Doctrine\Migrations\Tools\Console\Command\SyncMetadataCommand;
use Doctrine\Migrations\Tools\Console\Command\UpToDateCommand;
use Doctrine\Migrations\Tools\Console\Command\VersionCommand;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Tools\Console\Command\ClearCache\CollectionRegionCommand;
use Doctrine\ORM\Tools\Console\Command\ClearCache\EntityRegionCommand;
use Doctrine\ORM\Tools\Console\Command\ClearCache\MetadataCommand;
use Doctrine\ORM\Tools\Console\Command\ClearCache\QueryCommand;
use Doctrine\ORM\Tools\Console\Command\ClearCache\QueryRegionCommand;
use Doctrine\ORM\Tools\Console\Command\ClearCache\ResultCommand;
use Doctrine\ORM\Tools\Console\Command\ConvertDoctrine1SchemaCommand;
use Doctrine\ORM\Tools\Console\Command\EnsureProductionSettingsCommand;
use Doctrine\ORM\Tools\Console\Command\GenerateEntitiesCommand;
use Doctrine\ORM\Tools\Console\Command\GenerateProxiesCommand;
use Doctrine\ORM\Tools\Console\Command\GenerateRepositoriesCommand;
use Doctrine\ORM\Tools\Console\Command\InfoCommand;
use Doctrine\ORM\Tools\Console\Command\MappingDescribeCommand;
use Doctrine\ORM\Tools\Console\Command\RunDqlCommand;
use Doctrine\ORM\Tools\Console\Command\SchemaTool\CreateCommand;
use Doctrine\ORM\Tools\Console\Command\SchemaTool\DropCommand;
use Doctrine\ORM\Tools\Console\Command\SchemaTool\UpdateCommand;
use Doctrine\ORM\Tools\Console\Command\ValidateSchemaCommand;
use Doctrine\ORM\Tools\Console\EntityManagerProvider\ConnectionFromManagerProvider;
use Doctrine\ORM\Tools\Console\EntityManagerProvider\SingleManagerProvider;
use Psr\Container\ContainerExceptionInterface;
use Psr\Container\ContainerInterface;
use Psr\Container\NotFoundExceptionInterface;
use Psr\Log\LoggerInterface;
use Shared\Infrastructure\DependencyInjection\CompilerPassesType;
use Shared\Infrastructure\DependencyInjection\ContainerFactory;
use Shared\Infrastructure\Settings\SettingsInterface;
use Symfony\Component\Console\Application;
use Shared\Infrastructure\DependencyInjection\File;

(@include __DIR__ . '/../vendor/autoload.php') || @include __DIR__ . '/../../../autoload.php';

try {
    try {
        $settingsArray = File::require(__DIR__ . '/../config/settings.php');
    } catch (RuntimeException $e) {
        $settingsArray = File::require(__DIR__ . '/../../../../config/settings.php');
    }

    $container = ContainerFactory::create($settingsArray);
    $settings = $container->get(SettingsInterface::class);

    $serviceName = $settings->get('microservice.name');
    $serviceVersion = $settings->get('microservice.version');

    $cli = new Application("$serviceName CLI", $serviceVersion);
    $cli->setCatchExceptions(true);

    $cli->addCommands([
        // Migrations commands
        ...getMigrationCommands($container),
        // DBAL Commands
        ...getDbalCommands($container),
        // ORM Commands
        ...getDoctrineCommands($container),
        // Service commands
        ...getServiceCommandLines($container),
    ]);

    $cli->run();

} catch (Throwable $e) {

    echo json_encode([
        'message' => $e->getMessage(),
        'code' => $e->getCode(),
        'file' => "{$e->getFile()}:{$e->getLine()}",
        'trace' => $e->getTrace(),
    ], JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);

    exit("Unable run CLI");
}

/**
 * @throws NotFoundExceptionInterface
 * @throws ContainerExceptionInterface
 * @throws MigrationException
 */
function getMigrationCommands(ContainerInterface $container): array
{
    $settings = $container->get(SettingsInterface::class);

    $configuration = new Configuration();

    $configuration->addMigrationsDirectory(
        $settings->get('orm.migrations.namespace'),
        $settings->get('orm.migrations.path')
    );

    $storageConfiguration = new TableMetadataStorageConfiguration();
    $storageConfiguration->setTableName($settings->get('orm.migrations.table'));

    $configuration->setTransactional(true);
    $configuration->setAllOrNothing(true);
    $configuration->setCheckDatabasePlatform(false);
    $configuration->setMetadataStorageConfiguration($storageConfiguration);
    $configuration->setMigrationsAreOrganizedByYearAndMonth();

    $dependencyFactory = DependencyFactory::fromEntityManager(
        new ExistingConfiguration($configuration),
        new ExistingEntityManager($container->get(EntityManager::class)),
        $container->get(LoggerInterface::class)
    );

    return [
        new CurrentCommand($dependencyFactory),
        new DiffCommand($dependencyFactory),
        new DumpSchemaCommand($dependencyFactory),
        new ExecuteCommand($dependencyFactory),
        new GenerateCommand($dependencyFactory),
        new LatestCommand($dependencyFactory),
        new ListCommand($dependencyFactory),
        new MigrateCommand($dependencyFactory),
        new RollupCommand($dependencyFactory),
        new StatusCommand($dependencyFactory),
        new SyncMetadataCommand($dependencyFactory),
        new UpToDateCommand($dependencyFactory),
        new VersionCommand($dependencyFactory),
    ];
}

/**
 * @throws ContainerExceptionInterface
 * @throws NotFoundExceptionInterface
 */
function getDbalCommands(ContainerInterface $container): array
{
    $entityManager = $container->get(EntityManager::class);

    $singleManagerProvider = new SingleManagerProvider($entityManager);
    $connectionProvider = new ConnectionFromManagerProvider($singleManagerProvider);

    return [
        new ReservedWordsCommand($connectionProvider),
        new RunSqlCommand($connectionProvider),
    ];
}

/**
 * @throws ContainerExceptionInterface
 * @throws NotFoundExceptionInterface
 */
function getDoctrineCommands(ContainerInterface $container): array
{
    $entityManager = $container->get(EntityManager::class);

    $singleManagerProvider = new SingleManagerProvider($entityManager);

    return [
        new CollectionRegionCommand($singleManagerProvider),
        new EntityRegionCommand($singleManagerProvider),
        new MetadataCommand($singleManagerProvider),
        new QueryCommand($singleManagerProvider),
        new QueryRegionCommand($singleManagerProvider),
        new ResultCommand($singleManagerProvider),
        new CreateCommand($singleManagerProvider),
        new UpdateCommand($singleManagerProvider),
        new DropCommand($singleManagerProvider),
        new EnsureProductionSettingsCommand($singleManagerProvider),
        new ConvertDoctrine1SchemaCommand(),
        new GenerateRepositoriesCommand($singleManagerProvider),
        new GenerateEntitiesCommand($singleManagerProvider),
        new GenerateProxiesCommand($singleManagerProvider),
        //new ConvertMappingCommand($singleManagerProvider),
        new RunDqlCommand($singleManagerProvider),
        new ValidateSchemaCommand($singleManagerProvider),
        new InfoCommand($singleManagerProvider),
        new MappingDescribeCommand($singleManagerProvider),
    ];
}

/**
 * @throws ContainerExceptionInterface
 * @throws NotFoundExceptionInterface
 */
function getServiceCommandLines(ContainerInterface $container): array
{
    $key = CompilerPassesType::COMMAND_LINES->value;

    return $container->has($key) ? $container->get($key) : [];
}
